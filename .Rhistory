source('main.R')
setwd("~/Projets/Software Development/R/Audience-AI")
source('main.R')
View(exportNotes)
View(exportNotes)
write.csv(exportNotes)
write.csv(exportNotes, file = "Exp05.csv")
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
# filters.R
#
# Contains a series of filters aiming at extracting musical data
# from an audio file.
#
# Written by Jesse Bilton, 2018
# Load Packages
source('cansim_script.R')
# Global Variables of filters.R
fftFs <- 44100	# audio sample rate
fftLength <- 4096	# Fourrier Transform size
# Routines
apply_fft <- function(aSample) {
#prints a plot
#Y <- spec(aSample, f = fftFs, wl = fftLength)
#return(Y)
#previous code for posterity:
Y <- fft(aSample, inverse = FALSE)
#fftLength <- length(Y)
return(Y)
}
get_fftDeltaFreq <- function() {
fftDeltaFreq <- ((fftFs) / (fftLength + 1))
return(fftDeltaFreq)
}
# extract peaks, or high values in sample post FFT. Needs rewrite
extractPeaks <- function(Y) {
fftDeltaFreq <- get_fftDeltaFreq()
peaksLength <- (length(Y) / 2)	# FFTs duplicate data, hence /2
# Keep values above 3% of maximum peak; others are set to "0"
pct <- 0.03		# we keep values that are higher than 3% of max
Ymax <- max(abs(Y))
pct_X_Ymax <- pct*Ymax
Yfiltered <- abs(Y[1:peaksLength])
validValues <- which(Yfiltered >= pct_X_Ymax)
validLength <- length(validValues)
debugSource('~/Projets/Software Development/R/Audience-AI/filters.R')
debugSource('~/Projets/Software Development/R/Audience-AI/filters.R')
debugSource('~/Projets/Software Development/R/Audience-AI/filters.R', echo=TRUE)
source('~/Projets/Software Development/R/Audience-AI/main.R', echo=TRUE)
source('~/Projets/Software Development/R/Audience-AI/main.R', echo=TRUE)
source('~/Projets/Software Development/R/Audience-AI/main.R', echo=TRUE)
View(peaks)
source('main.R')
View(peaks)
source('main.R')
View(extractedPeaks)
View(extractedPeaks)
source('main.R')
source('main.R')
View(extractedPeaks)
source('main.R')
source('main.R')
View(extractedPeaks)
view(extractedPeaks[,220])
extractedPeaks[,220]
a <- 1
a[1]
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
